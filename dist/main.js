(()=>{"use strict";var e={312:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=n(i(862));function s(e){e.width=e.height=Math.min(window.innerWidth,window.innerHeight)}const o=document.getElementById("gfx");if(s(o),navigator.gpu){const e=new r.default(o);window.onresize=function(){s(o),e.onResize()},e.start()}else document.getElementById("error").style.display="block",o.style.display="none"},862:function(e,t,i){var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(r,s){function o(e){try{u(n.next(e))}catch(e){s(e)}}function a(e){try{u(n.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}u((n=n.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i(284)),o=r(i(787)),a=new Float32Array([1,-1,0,-1,-1,0,-1,1,0,1,1,0]),u=new Uint16Array([0,3,1,2]);t.default=class{constructor(e){this.render=e=>{const t=this.last_frame_timestamp;(0==t||e-t>=100)&&(this.last_frame_timestamp=e,this.renderPassDescriptor.colorAttachments[0].view=this.context.getCurrentTexture().createView(),this.encodeCommands()),requestAnimationFrame(this.render)},this.canvas=e,this.cellBuffers=[void 0,void 0],this.computeBindGroups=[void 0,void 0],this.renderBindGroups=[void 0,void 0],this.step=0,this.last_frame_timestamp=0}start(){return n(this,void 0,void 0,(function*(){(yield this.initializeAPI())&&(this.resizeBackings(),yield this.initializeResources(),this.render(0))}))}onResize(){this.resizeBackings()}initializeAPI(){return n(this,void 0,void 0,(function*(){try{const e=navigator.gpu;if(!e)return!1;this.adapter=yield e.requestAdapter(),this.device=yield this.adapter.requestDevice()}catch(e){return console.error(e),!1}return!0}))}createBuffer(e,t){let i={size:e.byteLength+3&-4,usage:t,mappedAtCreation:!0},n=this.device.createBuffer(i);return(e instanceof Uint16Array?new Uint16Array(n.getMappedRange()):e instanceof Uint32Array?new Uint32Array(n.getMappedRange()):new Float32Array(n.getMappedRange())).set(e),n.unmap(),n}initializeCellBuffers(){let e=new Uint32Array(4096);e[321]=1,e[322]=1,e[385]=1,e[386]=1,e[205]=1,e[206]=1,e[268]=1,e[331]=1,e[395]=1,e[459]=1,e[524]=1,e[589]=1,e[590]=1,e[399]=1,e[272]=1,e[528]=1,e[337]=1,e[401]=1,e[465]=1,e[402]=1,e[213]=1,e[277]=1,e[341]=1,e[214]=1,e[278]=1,e[342]=1,e[151]=1,e[407]=1,e[89]=1,e[153]=1,e[409]=1,e[473]=1,e[227]=1,e[291]=1,e[228]=1,e[292]=1;for(var t=0;t<2;t++)this.cellBuffers[t]=this.createBuffer(e,GPUBufferUsage.STORAGE|GPUBufferUsage.FRAGMENT)}initializeComputePipeline(){const e=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]});for(var t=0;t<2;t++)this.computeBindGroups[t]=this.device.createBindGroup({layout:e,entries:[{binding:0,resource:{buffer:this.uniformBuffer,size:4}},{binding:1,resource:{buffer:this.cellBuffers[t],size:16384}},{binding:2,resource:{buffer:this.cellBuffers[(t+1)%2],size:16384}}]});this.computePipeline=this.device.createComputePipeline({layout:this.device.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:this.computeShader,entryPoint:"main"}})}initializeRenderPipeline(){const e={module:this.drawShader,entryPoint:"vert_stage",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"}]},t={module:this.drawShader,entryPoint:"frag_stage",targets:[{format:"bgra8unorm"}]},i=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}}]});for(var n=0;n<2;n++)this.renderBindGroups[n]=this.device.createBindGroup({layout:i,entries:[{binding:0,resource:{buffer:this.uniformBuffer,size:4}},{binding:1,resource:{buffer:this.cellBuffers[n],size:16384}}]});this.renderPipeline=this.device.createRenderPipeline({layout:this.device.createPipelineLayout({bindGroupLayouts:[i]}),vertex:e,fragment:t,primitive:{frontFace:"cw",cullMode:"none",topology:"triangle-strip",stripIndexFormat:"uint16"}}),this.renderPassDescriptor={colorAttachments:[{view:void 0,clearValue:{r:.2,g:.2,b:.2,a:1},loadOp:"clear",storeOp:"store"}]}}initializeResources(){return n(this,void 0,void 0,(function*(){this.initializeCellBuffers(),this.uniformBuffer=this.createBuffer(new Uint32Array([64]),GPUBufferUsage.UNIFORM),this.positionBuffer=this.createBuffer(a,GPUBufferUsage.VERTEX),this.indexBuffer=this.createBuffer(u,GPUBufferUsage.INDEX),this.computeShader=this.device.createShaderModule({code:s.default}),this.drawShader=this.device.createShaderModule({code:o.default}),this.initializeComputePipeline(),this.initializeRenderPipeline()}))}resizeBackings(){this.context||(this.context=this.canvas.getContext("webgpu"));var e=[this.canvas.width,this.canvas.height];const t={device:this.device,format:"bgra8unorm",size:e};this.context.configure(t)}encodeCommands(){const e=this.device.createCommandEncoder();{const t=e.beginComputePass();t.setPipeline(this.computePipeline),t.setBindGroup(0,this.computeBindGroups[this.step%2]),t.dispatch(4096),t.end()}{const t=e.beginRenderPass(this.renderPassDescriptor);t.setPipeline(this.renderPipeline),t.setBindGroup(0,this.renderBindGroups[this.step%2]),t.setVertexBuffer(0,this.positionBuffer),t.setIndexBuffer(this.indexBuffer,"uint16"),t.drawIndexed(4),t.end()}this.device.queue.submit([e.finish()]),++this.step}}},284:e=>{e.exports="struct Grid {\n    cells: array<u32>;\n};\n\n@binding(0) @group(0) var<uniform> gridWidth: i32;\n\n// The previous and next cell generations\n@binding(1) @group(0) var<storage, read> prev: Grid;\n@binding(2) @group(0) var<storage, read_write> next: Grid;\n\nfn get_cell(idx: vec2<i32>) -> u32 {\n    if (idx.x >= 0 && idx.x < gridWidth && idx.y >= 0 && idx.y < gridWidth) {\n        return prev.cells[idx.x + gridWidth * idx.y];\n    }\n    return 0u;\n}\n\nfn count_live_neighbors(idx: i32) -> u32 {\n    var count = 0u;\n    let c = vec2<i32>(idx % gridWidth, idx / gridWidth);\n    count = count + get_cell(c + vec2<i32>(-1,  0));\n    count = count + get_cell(c + vec2<i32>( 1,  0));\n    count = count + get_cell(c + vec2<i32>(-1, -1));\n    count = count + get_cell(c + vec2<i32>( 0, -1));\n    count = count + get_cell(c + vec2<i32>( 1, -1));\n    count = count + get_cell(c + vec2<i32>(-1,  1));\n    count = count + get_cell(c + vec2<i32>( 0,  1));\n    count = count + get_cell(c + vec2<i32>( 1,  1));\n    return count;\n}\n\n@stage(compute) @workgroup_size(64)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n    let idx = i32(GlobalInvocationID.x);\n    let live = count_live_neighbors(idx);\n    let cell = prev.cells[idx];\n    if (((cell == 1u) && (live == 2u || live == 3u)) || live == 3u) {\n        next.cells[idx] = 1u;\n    } else {\n        next.cells[idx] = 0u;\n    }\n}\n"},787:e=>{e.exports="struct Grid {\n    cells: array<u32>;\n};\n\n@binding(0) @group(0) var<uniform> gridWidth: u32;\n@binding(1) @group(0) var<storage, read> grid: Grid;\n\n// Vertex stage output\nstruct VSOut {\n    @builtin(position) pos: vec4<f32>;\n    @location(0) fragCoord: vec2<f32>;\n};\n\n@stage(vertex)\nfn vert_stage(@location(0) inPos: vec3<f32>) -> VSOut {\n    var vsOut: VSOut;\n    vsOut.pos = vec4<f32>(inPos, 1.0);\n    vsOut.fragCoord = (inPos.xy + 1.) * .5;\n    return vsOut;\n}\n\n@stage(fragment)\nfn frag_stage(@location(0) fc: vec2<f32>) -> @location(0) vec4<f32> {\n    // Flip y, so that the top-left corner is the origin.\n    let fragCoord = vec2<f32>(0.0, 1.0) - fc;\n    let coords = vec2<u32>(floor(abs(fragCoord) * (f32(gridWidth) - 0.001)));\n    let idx = coords.y * gridWidth + coords.x;\n    if (grid.cells[idx] == 0u) {\n        return vec4<f32>(0.2, 0.2, 0.2, 1.0);\n    }\n    return vec4<f32>(1.0, 0.2, 0.0, 1.0);\n}\n"}},t={};!function i(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,i),s.exports}(312)})();